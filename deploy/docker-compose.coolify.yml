version: '3.8'

services:
  terminal-turtle:
    build: 
      context: .
      dockerfile: ./Dockerfile
    image: terminal-turtle:latest
    ports:
      - "${TURTLE_API_PORT:-3000}:${TURTLE_API_PORT:-3000}"
      - "${APP_PORT:-3100}:${APP_PORT:-3100}"
      - "${EDITOR_PORT:-4433}:8443"
    environment:
      
      # Core Configuration
      - NODE_ENV=production
      - TURTLE_API_PORT=${TURTLE_API_PORT:-3000}
      - APP_PORT=${APP_PORT:-3100}
      - EDITOR_PORT=${EDITOR_PORT:-4433}
      - WORKING_DIRECTORY=/data/workspace
      - AGENT_NAME=${AGENT_NAME:-terminal-turtle}
      - TURTLE_API_KEY=${TURTLE_API_KEY}
      
      # Template Configuration (vite, react, or express)
      - PROJECT_TEMPLATE=${PROJECT_TEMPLATE:-vite}
      
      # Optional AI Integration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      
      # Auto-start development server
      - AUTO_START_DEV_SERVER=${AUTO_START_DEV_SERVER:-true}
    volumes:
      - workspace:/data/workspace
      - ./templates:/app/templates:ro
    restart: unless-stopped
    labels:
      # Tell Coolify to route main domain to APP_PORT (your application)
      - "coolify.port=${APP_PORT:-3100}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${TURTLE_API_PORT:-3000}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: |
      bash -c '
        # Start code-server in background on port 8443
        echo "Starting code-server..."
        PASSWORD=none code-server /data/workspace --bind-addr 0.0.0.0:8443 --auth none &
        
        # Start the main application
        node dist/main.js &
        API_PID=$$!
        
        # Initialize project if workspace is empty
        if [ -z "$$(ls -A /data/workspace 2>/dev/null)" ]; then
          echo "Initializing $${PROJECT_TEMPLATE} project..."
          case $${PROJECT_TEMPLATE} in
            vite)
              cd /data/workspace
              npm create vite@latest . -- --template react-ts --yes
              NODE_ENV=development npm install --include=dev
              # Configure Vite to accept external hosts
              echo "import { defineConfig } from '\''vite'\''" > vite.config.ts
              echo "import react from '\''@vitejs/plugin-react'\''" >> vite.config.ts
              echo "" >> vite.config.ts
              echo "export default defineConfig({" >> vite.config.ts
              echo "  plugins: [react()]," >> vite.config.ts
              echo "  server: {" >> vite.config.ts
              echo "    host: '\''0.0.0.0'\''," >> vite.config.ts
              echo "    port: $${APP_PORT:-3100}," >> vite.config.ts
              echo "    strictPort: true," >> vite.config.ts
              ALLOWED_HOST=$$(echo "$${COOLIFY_FQDN%%,*}" | sed "s|https://||" | sed "s|:3100||")
              echo "    allowedHosts: ['\''"$$ALLOWED_HOST"'\'']" >> vite.config.ts
              echo "  }" >> vite.config.ts
              echo "})" >> vite.config.ts
              npm run dev &
              ;;
            react)
              cd /data/workspace
              npx create-react-app . --template typescript --use-npm
              NODE_ENV=development npm install --include=dev
              BROWSER=none HOST=0.0.0.0 PORT=$${APP_PORT} npm start &
              ;;
            express)
              cd /data/workspace
              npm init -y
              npm install express cors dotenv
              npm install -D @types/node @types/express typescript nodemon
              # Create basic server
              echo "const express = require(\"express\"); const app = express(); app.get(\"/\", (req, res) => res.json({message: \"Hello from Terminal Turtle\"})); app.listen($${APP_PORT}, () => console.log(\"Server running on port $${APP_PORT}\"));" > index.js
              PORT=$${APP_PORT} node index.js &
              ;;
          esac
        else
          echo "Workspace exists, starting existing project..."
          cd /data/workspace
          case $${PROJECT_TEMPLATE} in
            vite)
              # Ensure vite.config.ts exists with correct port
              if [ ! -f vite.config.ts ]; then
                echo "import { defineConfig } from '\''vite'\''" > vite.config.ts
                echo "import react from '\''@vitejs/plugin-react'\''" >> vite.config.ts
                echo "" >> vite.config.ts
                echo "export default defineConfig({" >> vite.config.ts
                echo "  plugins: [react()]," >> vite.config.ts
                echo "  server: {" >> vite.config.ts
                echo "    host: '\''0.0.0.0'\''," >> vite.config.ts
                echo "    port: $${APP_PORT:-3100}," >> vite.config.ts
                echo "    strictPort: true," >> vite.config.ts
                ALLOWED_HOST=$$(echo "$${COOLIFY_FQDN%%,*}" | sed "s|https://||" | sed "s|:3100||")
                echo "    allowedHosts: ['\''"$$ALLOWED_HOST"'\'']" >> vite.config.ts
                echo "  }" >> vite.config.ts
                echo "})" >> vite.config.ts
              fi
              npm run dev &
              ;;
            react)
              BROWSER=none HOST=0.0.0.0 PORT=$${APP_PORT} npm start &
              ;;
            express)
              PORT=$${APP_PORT} node index.js &
              ;;
          esac
        fi
        
        # Keep container running
        wait $$API_PID
      '

volumes:
  workspace:
    driver: local