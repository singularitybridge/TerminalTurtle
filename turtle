#!/bin/bash

# turtle - Main TerminalTurtle management script
# Usage: turtle <command> [options]

set -e

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

BASE_DIR=$(dirname "$0")
INSTANCES_DIR="$BASE_DIR/instances"

# Ensure instances directory exists
mkdir -p "$INSTANCES_DIR"

COMMAND=${1:-help}
shift || true

case $COMMAND in
    spawn)
        # Spawn a new instance
        if [ $# -lt 2 ]; then
            echo -e "${RED}Error: Port number and template required${NC}"
            echo "Usage: turtle spawn <port> <template> [name]"
            echo ""
            echo "Available templates:"
            echo "  react    - React with TypeScript"
            echo "  vite     - Vite with React & TypeScript"  
            echo "  express  - Express.js with TypeScript"
            exit 1
        fi
        "$BASE_DIR/spawn-turtle-v3.sh" "$@"
        ;;
        
    list|ls)
        # List all instances
        echo -e "${BLUE}🐢 TerminalTurtle Turtles${NC}"
        echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        
        if [ ! -d "$INSTANCES_DIR" ] || [ -z "$(ls -A "$INSTANCES_DIR" 2>/dev/null)" ]; then
            echo -e "${YELLOW}No turtles found.${NC}"
            echo -e "\nUse 'turtle spawn <port>' to create a new turtle."
        else
            printf "%-20s %-10s %-15s %-10s\n" "NAME" "PORT" "STATUS" "CREATED"
            echo -e "${BLUE}───────────────────────────────────────────────${NC}"
            
            for instance_dir in "$INSTANCES_DIR"/*; do
                if [ -d "$instance_dir" ] && [ -f "$instance_dir/instance-info.json" ]; then
                    instance_name=$(basename "$instance_dir")
                    
                    # Parse instance info
                    port=$(jq -r '.turtle_api_port // .api_port' "$instance_dir/instance-info.json" 2>/dev/null || echo "N/A")
                    created=$(jq -r '.created_at' "$instance_dir/instance-info.json" 2>/dev/null || echo "Unknown")
                    created_date=$(echo "$created" | cut -d'T' -f1)
                    
                    # Check container status
                    if (cd "$instance_dir" 2>/dev/null && docker-compose ps --services --filter "status=running" 2>/dev/null | grep -q .); then
                        status="${GREEN}Running${NC}"
                    else
                        status="${RED}Stopped${NC}"
                    fi
                    
                    printf "%-20s %-10s %-15b %-10s\n" "$instance_name" "$port" "$status" "$created_date"
                fi
            done
        fi
        echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        ;;
        
    info)
        # Show detailed info about a turtle
        if [ $# -lt 1 ]; then
            echo -e "${RED}Error: Turtle name required${NC}"
            echo "Usage: turtle info <turtle-name>"
            exit 1
        fi
        
        INSTANCE_NAME=$1
        INSTANCE_DIR="$INSTANCES_DIR/$INSTANCE_NAME"
        
        if [ ! -d "$INSTANCE_DIR" ]; then
            echo -e "${RED}Error: Turtle '$INSTANCE_NAME' not found${NC}"
            exit 1
        fi
        
        if [ ! -f "$INSTANCE_DIR/instance-info.json" ]; then
            echo -e "${RED}Error: Turtle info not found${NC}"
            exit 1
        fi
        
        echo -e "${BLUE}🐢 Turtle: ${GREEN}$INSTANCE_NAME${NC}"
        echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        
        # Parse and display instance info
        TEMPLATE=$(jq -r '.template' "$INSTANCE_DIR/instance-info.json")
        TURTLE_API_PORT=$(jq -r '.turtle_api_port' "$INSTANCE_DIR/instance-info.json")
        APP_PORT=$(jq -r '.app_port' "$INSTANCE_DIR/instance-info.json")
        EDITOR_PORT=$(jq -r '.editor_port' "$INSTANCE_DIR/instance-info.json")
        
        # Show URLs
        echo -e "🌐 ${GREEN}Your App: http://localhost:$APP_PORT${NC} ${BLUE}← Open this in your browser!${NC}"
        echo -e "📝 ${GREEN}Code Editor: http://localhost:$EDITOR_PORT${NC} ${BLUE}(VS Code Web)${NC}"
        
        echo ""
        jq -r '
            "Template: \(.template)",
            "Turtle API: http://localhost:\(.turtle_api_port) (for automation/scripting)",
            "API Key: \(.api_key)",
            "Created: \(.created_at)",
            "Workspace: \(.workspace)"
        ' "$INSTANCE_DIR/instance-info.json"
        
        # Check container status
        echo -e "\n${BLUE}Container Status:${NC}"
        if cd "$INSTANCE_DIR" && docker-compose ps 2>/dev/null; then
            :
        else
            echo -e "${YELLOW}Container information not available${NC}"
        fi
        
        echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        ;;
        
    start|stop|restart|logs)
        # Control a turtle
        if [ $# -lt 1 ]; then
            echo -e "${RED}Error: Turtle name required${NC}"
            echo "Usage: turtle $COMMAND <turtle-name>"
            exit 1
        fi
        
        INSTANCE_NAME=$1
        INSTANCE_DIR="$INSTANCES_DIR/$INSTANCE_NAME"
        
        if [ ! -d "$INSTANCE_DIR" ]; then
            echo -e "${RED}Error: Turtle '$INSTANCE_NAME' not found${NC}"
            exit 1
        fi
        
        cd "$INSTANCE_DIR"
        ./turtle-control.sh "$COMMAND"
        ;;
        
    destroy|kill)
        # Destroy a turtle
        if [ $# -lt 1 ]; then
            echo -e "${RED}Error: Turtle name required${NC}"
            echo "Usage: turtle destroy <turtle-name> [-f|--force]"
            echo "       turtle kill <turtle-name>  (same as destroy --force)"
            exit 1
        fi
        
        INSTANCE_NAME=$1
        INSTANCE_DIR="$INSTANCES_DIR/$INSTANCE_NAME"
        FORCE=false
        
        # Check for force flag or if command is 'kill'
        if [ "$COMMAND" = "kill" ] || [ "${2:-}" = "-f" ] || [ "${2:-}" = "--force" ]; then
            FORCE=true
        fi
        
        if [ ! -d "$INSTANCE_DIR" ]; then
            echo -e "${RED}Error: Turtle '$INSTANCE_NAME' not found${NC}"
            exit 1
        fi
        
        if [ "$FORCE" = "false" ]; then
            echo -e "${YELLOW}⚠️  WARNING: This will destroy the turtle and all its data!${NC}"
            echo -e "Turtle: ${RED}$INSTANCE_NAME${NC}"
            echo -e "${YELLOW}Type 'yes' to confirm, or use 'turtle kill $INSTANCE_NAME' to skip confirmation${NC}"
            echo -n "Are you sure? (yes/no): "
            read -r response
            
            if [ "$response" != "yes" ]; then
                echo -e "${BLUE}Cancelled${NC}"
                exit 0
            fi
        fi
        
        # Stop and remove the turtle
        echo -e "${BLUE}Destroying turtle '$INSTANCE_NAME'...${NC}"
        if cd "$INSTANCE_DIR" 2>/dev/null; then
            docker-compose down -v 2>/dev/null || true
        fi
        cd "$BASE_DIR"
        rm -rf "$INSTANCE_DIR"
        echo -e "${GREEN}✓ Turtle '$INSTANCE_NAME' destroyed${NC}"
        ;;
        
    aider)
        # Connect to aider AI agent in an instance
        if [ $# -lt 1 ]; then
            echo -e "${RED}Error: Instance name required${NC}"
            echo "Usage: turtle aider <instance-name> [message]"
            echo ""
            echo "Examples:"
            echo "  turtle aider demo-app                    # Start interactive aider session"
            echo "  turtle aider demo-app \"Add a navbar\"     # Send a single request"
            exit 1
        fi
        
        INSTANCE_NAME=$1
        INSTANCE_DIR="$INSTANCES_DIR/$INSTANCE_NAME"
        
        if [ ! -d "$INSTANCE_DIR" ]; then
            echo -e "${RED}Error: Instance '$INSTANCE_NAME' not found${NC}"
            exit 1
        fi
        
        # Check if container is running
        if ! cd "$INSTANCE_DIR" && docker-compose ps --services --filter "status=running" 2>/dev/null | grep -q .; then
            echo -e "${RED}Error: Instance '$INSTANCE_NAME' is not running${NC}"
            echo -e "Start it with: ${GREEN}turtle start $INSTANCE_NAME${NC}"
            exit 1
        fi
        
        shift # Remove instance name from args
        
        if [ $# -eq 0 ]; then
            # Interactive mode
            echo -e "${BLUE}🤖 Connecting to Aider AI agent...${NC}"
            echo -e "${YELLOW}Note: You'll need to configure your API key in the container${NC}"
            echo -e "${YELLOW}Run: export ANTHROPIC_API_KEY=your-key-here${NC}"
            echo ""
            docker exec -it "$INSTANCE_NAME" bash -c "cd /data/workspace && aider"
        else
            # Single message mode
            MESSAGE="$*"
            echo -e "${BLUE}🤖 Sending request to Aider...${NC}"
            docker exec -it "$INSTANCE_NAME" bash -c "cd /data/workspace && echo '$MESSAGE' | aider --yes --no-pretty"
        fi
        ;;
        
    clean)
        # Clean up stopped instances
        echo -e "${BLUE}Cleaning up stopped turtles...${NC}"
        
        cleaned=0
        for instance_dir in "$INSTANCES_DIR"/*; do
            if [ -d "$instance_dir" ]; then
                instance_name=$(basename "$instance_dir")
                
                # Check if container exists and is stopped
                if cd "$instance_dir" 2>/dev/null; then
                    if ! docker-compose ps --services --filter "status=running" 2>/dev/null | grep -q .; then
                        echo -e "Removing stopped turtle: ${YELLOW}$instance_name${NC}"
                        docker-compose down -v 2>/dev/null || true
                        cd "$BASE_DIR"
                        rm -rf "$instance_dir"
                        ((cleaned++))
                    fi
                fi
            fi
        done
        
        if [ $cleaned -eq 0 ]; then
            echo -e "${GREEN}No stopped turtles to clean${NC}"
        else
            echo -e "${GREEN}✓ Cleaned $cleaned turtle(s)${NC}"
        fi
        ;;
        
    remote)
        # Manage remote instances deployed on Coolify/cloud
        "$BASE_DIR/turtle-remote.sh" "$@"
        ;;
        
    help|*)
        echo -e "${BLUE}🐢 TerminalTurtle Management Tool${NC}"
        echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        echo ""
        echo "Usage: turtle <command> [options]"
        echo ""
        echo -e "${GREEN}Local Turtle Commands:${NC}"
        echo "  spawn <port> <template> [name]    Spawn a new turtle with template"
        echo "  list, ls               List all turtles"
        echo "  info <name>            Show detailed info about a turtle"
        echo "  start <name>           Start a turtle"
        echo "  stop <name>            Stop a turtle"
        echo "  restart <name>         Restart a turtle"
        echo "  logs <name>            Show logs for a turtle"
        echo "  aider <name> [message] 🤖 Connect to AI coding agent (Aider)"
        echo "  destroy <name> [-f]    Destroy a turtle (asks confirmation)"
        echo "  kill <name>            Destroy a turtle immediately (no confirmation)"
        echo "  clean                  Clean up all stopped turtles"
        echo ""
        echo -e "${GREEN}Remote Turtle Commands:${NC}"
        echo "  remote add <name> <url> <key>     Add remote turtle"
        echo "  remote list            List remote turtles"
        echo "  remote exec <name> <cmd>          Execute command remotely"
        echo "  remote logs <name>     View remote logs"
        echo "  remote info <name>     Show remote turtle info"
        echo "  remote help            More remote commands"
        echo ""
        echo -e "${GREEN}General:${NC}"
        echo "  help                   Show this help message"
        echo ""
        echo "Examples:"
        echo -e "${YELLOW}Local:${NC}"
        echo "  turtle spawn 3004 react           # Spawn React turtle locally"
        echo "  turtle list                       # List local turtles"
        echo "  turtle logs myproject             # View local logs"
        echo "  turtle kill myproject             # Destroy turtle immediately"
        echo ""
        echo -e "${YELLOW}Remote:${NC}"
        echo "  turtle remote add prod https://tt.coolify.app sk_abc..."
        echo "  turtle remote exec prod 'npm install'"
        echo "  turtle remote logs prod"
        echo ""
        echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        ;;
esac